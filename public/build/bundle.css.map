{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\CommentInput.svelte",
    "..\\..\\Comments.svelte",
    "..\\..\\QuestionInfo.svelte",
    "..\\..\\SelectTasks.svelte",
    "..\\..\\Submissions.svelte",
    "..\\..\\Tasks.svelte",
    "..\\..\\MainDash.svelte",
    "..\\..\\QuerySubmissions.svelte",
    "..\\..\\SelectTaskHFT.svelte",
    "..\\..\\SelectTaskQuiz.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n\timport PageMainDash from \"./pages/MainDash.svelte\"\r\n\timport PageSelectTaskHFT from \"./pages/SelectTaskHFT.svelte\"\r\n\timport PageSelectTaskQuiz from \"./pages/SelectTaskQuiz.svelte\"\r\n\timport PageQuerySubmissions from \"./pages/QuerySubmissions.svelte\"\r\n\r\n\tconst smhw = require(\"node-smhw\");\r\n\tconst { ipcRenderer } = require(\"electron\");\r\n\tconst storage = require(\"electron-json-storage\");\r\n\r\n\tconst client = new smhw.Client;\r\n\r\n\tconst _cache = {\r\n\t\tclass_groups: {},\r\n\t\temployees: {},\r\n\t\tteachers: {},\r\n\t\town_teachers: {},\r\n\t\tusers: {},\r\n\t\ttasks: {},\r\n\t\tsubmissions: {},\r\n\t\tcomments: {},\r\n\t\tassignments: {},\r\n\t\tattachments: {},\r\n\t\tquestions: {},\r\n\t\tsubmission_questions: {}\r\n\t}\r\n\r\n\t$: {\r\n\t\tObject.values(_cache.employees).forEach(employee => {\r\n\t\t\tif (employee.employee_type === \"teacher\") {\r\n\t\t\t\t_cache.teachers[employee.id] = employee;\r\n\r\n\t\t\t\tif (Object.values(_cache.class_groups).filter(class_group => class_group.teacher_ids.indexOf(employee.id) !== -1)[0]) {\r\n\t\t\t\t\t_cache.own_teachers[employee.id] = employee;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tlet selected_task = null;\r\n\t$: selected_assignment = selected_task ? _cache.assignments[selected_task.id] || null : null;\r\n\t\r\n\tlet selected_submission;\r\n\r\n\tfunction select_task() {\r\n\t\tconsole.log(\"Selected task.\");\r\n\r\n\t\tif (selected_task) {\r\n\t\t\tselected_assignment = null;\r\n\t\t\t\r\n\t\t\tif (selected_task.class_task_type === \"Quiz\") {\r\n\t\t\t\tselected_task.getAssignment().then(assignment => {\r\n\t\t\t\t\tconsole.log(\"Got assignment.\", assignment);\r\n\r\n\t\t\t\t\tassignment.getQuestions().then(questions => {\r\n\t\t\t\t\t\tconsole.log(\"Got questions.\", questions);\r\n\r\n\t\t\t\t\t\tassignment.getSubmission().then(submission => {\r\n\t\t\t\t\t\t\tconsole.log(\"Got submission.\", submission);\r\n\r\n\t\t\t\t\t\t\tsubmission.getComments().then(comments => {\r\n\t\t\t\t\t\t\t\tconsole.log(\"Got comments.\", comments);\r\n\r\n\t\t\t\t\t\t\t\tsubmission.getQuestions().then(questions => {\r\n\t\t\t\t\t\t\t\t\tconsole.log(\"Got submission questions.\", questions);\r\n\r\n\t\t\t\t\t\t\t\t\tquestions.forEach(question => {\r\n\t\t\t\t\t\t\t\t\t\t_cache.submission_questions[question.id] = question;\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t}).catch(console.log);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tcomments.forEach(comment => {\r\n\t\t\t\t\t\t\t\t\t_cache.comments[comment.id] = comment;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}).catch(console.log);\r\n\r\n\t\t\t\t\t\t\t_cache.submissions[submission.id] = submission;\r\n\t\t\t\t\t\t}).catch(console.log);\r\n\r\n\t\t\t\t\t\tquestions.forEach(question => {\r\n\t\t\t\t\t\t\t_cache.questions[question.id] = question;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}).catch(console.log);\r\n\r\n\t\t\t\t\t_cache.assignments[assignment.id] = assignment;\r\n\t\t\t\t}).catch(console.log);\r\n\t\t\t} else {\r\n\t\t\t\tselected_task.getAssignment().then(assignment => {\r\n\t\t\t\t\tconsole.log(\"Got assignment.\", assignment);\r\n\r\n\t\t\t\t\t_cache.assignments[assignment.id] = assignment;\r\n\t\t\t\t\t\r\n\t\t\t\t\tassignment.getSubmissions().then(submissions => {\r\n\t\t\t\t\t\tconsole.log(\"Got submissions.\", submissions);\r\n\r\n\t\t\t\t\t\tselected_submission = submissions.filter(submission => submission.student_id === client.student.id)[0] || null;\r\n\r\n\t\t\t\t\t\tsubmissions.forEach(submission => {\r\n\t\t\t\t\t\t\t_cache.submissions[submission.id] = submission;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}).catch(console.log).finally(() => {\r\n\t\t\t\t\t\tassignment.getAttachments().then(attachments => {\r\n\t\t\t\t\t\t\tconsole.log(\"Got attachments.\", attachments);\r\n\r\n\t\t\t\t\t\t\tattachments.forEach(attachment => {\r\n\t\t\t\t\t\t\t\t_cache.attachments[attachment.id] = attachment;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}).catch(console.log).finally(() => {\r\n\t\t\t\t\t\t\tassignment.getSubmissionComments().then(comments => {\r\n\t\t\t\t\t\t\t\tconsole.log(\"Got comments.\", comments);\r\n\r\n\t\t\t\t\t\t\t\tcomments.forEach(comment => {\r\n\t\t\t\t\t\t\t\t\t_cache.comments[comment.id] = comment;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}).catch(console.log);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tstorage.get(\"auth\", (err, auth) => {\r\n\t\tif (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tclient.login(auth).then(() => {\r\n\t\t\tconsole.log(\"Logged in.\");\r\n\r\n\t\t\tclient.student.getClassGroups().then(class_groups => {\r\n\t\t\t\tconsole.log(\"Got class groups.\", class_groups);\r\n\r\n\t\t\t\tclient.school.getEmployees().then(employees => {\r\n\t\t\t\t\tconsole.log(\"Got employees.\", employees);\r\n\r\n\t\t\t\t\tclient.getTasks().then(tasks => {\r\n\t\t\t\t\t\tconsole.log(\"Got tasks.\", tasks);\r\n\r\n\t\t\t\t\t\tclient.getUsers(Object.values(_cache.own_teachers).map(teacher => teacher.id)).then(users => {\r\n\t\t\t\t\t\t\tconsole.log(\"Got users.\", users);\r\n\r\n\t\t\t\t\t\t\tusers.forEach(user => {\r\n\t\t\t\t\t\t\t\t_cache.users[user.id] = user;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\ttasks.forEach(task => {\r\n\t\t\t\t\t\t\t_cache.tasks[task.id] = task;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\temployees.forEach(employee => {\r\n\t\t\t\t\t\t_cache.employees[employee.id] = employee;\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\r\n\t\t\t\tclass_groups.forEach(class_group => {\r\n\t\t\t\t\t_cache.class_groups[class_group.id] = class_group;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n\tlet query_submissions = false;\r\n\r\n\tipcRenderer.on(\"query-submissions\", function () {\r\n\t\tquery_submissions = true;\r\n\t\tselected_task = null;\r\n\t\tselected_assignment = null;\r\n\t});\r\n</script>\r\n\r\n<main>\r\n\t{#if selected_task}\r\n\t\t{#if selected_task.class_task_type === \"Quiz\"}\r\n\t\t\t<PageSelectTaskQuiz {client} {_cache} bind:selected_task={selected_task}/>\r\n\t\t{:else}\r\n\t\t\t<PageSelectTaskHFT {client} {_cache} bind:selected_task={selected_task} bind:selected_submission={selected_submission}/>\r\n\t\t{/if}\r\n\t{:else}\r\n\t\t{#if query_submissions}\r\n\t\t\t<PageQuerySubmissions {client} {_cache} bind:query_submissions={query_submissions}/>\r\n\t\t{:else}\r\n\t\t\t<PageMainDash {client} {_cache} bind:selected_task={selected_task} on:select_task={select_task}/>\r\n\t\t{/if}\r\n\t{/if}\r\n</main>\r\n\r\n<style>\r\n\tmain {\r\n\t\theight: 100%;\r\n\t}\r\n</style>",
    "<script>\r\n    export let submission;\r\n\r\n    let comment;\r\n</script>\r\n\r\n<textarea bind:value={comment} placeholder=\"Add a comment..\"></textarea>\r\n<button class=\"comment\" on:click={() => submission.postComment(comment)}>Submit</button>\r\n\r\n<style>\r\n* {\r\n    width: 100%;\r\n}\r\n</style>\r\n",
    "<script>\r\n    export let comments;\r\n    export let submission = null;\r\n</script>\r\n\r\n{#each comments as comment}\r\n    <p class=\"{submission ? (comment.user_id === submission.student_id ? \"out\" : \"in\") : \"\"}\"><b>{comment.user_name} @ {new Date(comment.created_at).toISOString()}:</b> {comment.text}</p>\r\n{/each}\r\n\r\n<style>\r\n    .out {\r\n        background-color: #b6b9ff;\r\n    }\r\n\r\n    .in {\r\n        background-color: #b5ead7;\r\n    }\r\n</style>",
    "<script>\r\n    export let question;\r\n    export let submission_question;\r\n\r\n    let chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\r\n</script>\r\n\r\n{#if question}\r\n    <span>ID: {question.id}</span><br>\r\n    <span>Question: {question.description}</span>\r\n    <table>\r\n        <thead>\r\n            <td>#</td>\r\n            <td>Attempts</td>\r\n            <td>Option</td>\r\n        </thead>\r\n        <tbody>\r\n            {#each question.options as option, i}\r\n                <tr class=\"{option === question.correct_answer ? \"option-correct\" : \"option-wrong\"}\">\r\n                    <td>{chars[i]}</td>\r\n                    <td>\r\n                        {#if submission_question}\r\n                            {submission_question.attempt1 && submission_question.attempt1.answer === option ? \"1\" : \"\"}\r\n                            {submission_question.attempt2 && submission_question.attempt2.answer === option ? \"2\" : \"\"}\r\n                            {submission_question.attempt3 && submission_question.attempt3.answer === option ? \"3\" : \"\"}\r\n                        {/if}\r\n                    </td>\r\n                    <td>{option}</td>\r\n                </tr>\r\n            {/each}\r\n        </tbody>\r\n    </table>\r\n{/if}\r\n\r\n<style>\r\n    table {\r\n        overflow: auto;\r\n    }\r\n\r\n    .option-correct {\r\n        background-color: #b5ead7;\r\n    }\r\n\r\n    .option-wrong {\r\n        background-color: #ee846a;\r\n    }\r\n</style>",
    "<script>\r\n    export let tasks;\r\n    export let selected;\r\n    export let max = 0;\r\n\r\n    let title = \"\";\r\n    let regex = false;\r\n    let description = false;\r\n    let class_group = \"\";\r\n    let subject = \"\";\r\n    let type = \"\";\r\n    let teacher = \"\";\r\n\r\n    let pool = [];\r\n\r\n    function update() {\r\n        pool = Object.values(tasks).filter(task => task.class_task_type === \"Homework\" || task.class_task_type === \"FlexibleTask\");\r\n\r\n        if (title) {\r\n            if (description) {\r\n                pool = pool.filter(task => (task.class_task_title.toLowerCase() + (task.description ? \" \" + task.description.toLowerCase() : \"\")).indexOf(title.toLowerCase()) !== -1);\r\n            } else {\r\n                pool = pool.filter(task => task.class_task_title.toLowerCase().indexOf(title.toLowerCase()) !== -1);\r\n            }\r\n        }\r\n\r\n        pool = class_group ? pool.filter(task => task.class_group_name.toLowerCase().indexOf(class_group.toLowerCase()) !== -1) : pool;\r\n        pool = subject ? pool.filter(task => task.subject.toLowerCase().indexOf(subject.toLowerCase()) !== -1) : pool;\r\n        pool = type ? pool.filter(task => task.class_task_type === type) : pool;\r\n        pool = teacher ? pool.filter(task => task.teacher_name.toLowerCase().indexOf(teacher.toLowerCase()) !== -1) : pool;\r\n        \r\n        pool.sort((a, b) => a.due_on - b.due_on);\r\n    }\r\n\r\n    $: if (tasks || title || regex || description || class_group || subject || type || teacher || 1) update();\r\n\r\n    let selected_tasks = {};\r\n    $: selected = Object.values(selected_tasks).filter(task => task);\r\n</script>\r\n\r\n<div class=\"selector-list\">\r\n    <div class=\"selector-list-header\">\r\n        <fieldset>\r\n            <legend>Filter ({pool.length})</legend>\r\n            <input name=\"filter\" bind:value={title}> <label for=\"filter\">Filter</label><br>\r\n            <input type=\"checkbox\" name=\"description\" bind:checked={description}> <label for=\"description\">Match description?</label><br>\r\n            <input name=\"class-group\" bind:value={class_group}> <label for=\"class-group\">Class group</label><br><br>\r\n            <input name=\"subject\" bind:value={subject}> <label for=\"subject\">Subject</label>\r\n            <select on:blur on:change={e => type = e.target.options[e.target.selectedIndex].value}>\r\n                <option selected={true} value=\"\">All</option>\r\n                <option value=\"Homework\">Homeworks</option>\r\n                <option value=\"FlexibleTask\">Flexible Tasks</option>\r\n            </select><br><br>\r\n            <input name=\"teacher\" bind:value={teacher}> <label for=\"teacher\">Teacher</label>\r\n        </fieldset>\r\n    </div>\r\n    <div class=\"selector-list-table\">\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <td><button on:click={() => { for (var task in selected_tasks) delete selected_tasks[task]; selected_tasks = selected_tasks}}>X</button></td>\r\n                    <td>Due on</td>\r\n                    <td>Class group</td>\r\n                    <td>Subject</td>\r\n                    <td>Teacher</td>\r\n                    <td>Title</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {#each pool as task, i}\r\n                    <tr class=\"task-{task.class_task_type.toLowerCase()}\">\r\n                        <td><input\r\n                            type=\"checkbox\"\r\n                            checked={selected_tasks[task.id]}\r\n                            disabled={max && selected.length >= max && !selected_tasks[task.id]}\r\n                            on:change={e => { e.target.checked ? selected_tasks[task.id] = task : selected_tasks[task.id] = null }}/>\r\n                        </td>\r\n                        <td>{new Date(task.due_on).toLocaleDateString()}</td>\r\n                        <td>{task.class_group_name}</td>\r\n                        <td>{task.subject}</td>\r\n                        <td>{task.teacher_name}</td>\r\n                        <td>{task.class_task_title}</td>\r\n                    </tr>\r\n                {/each}\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    .task-homework {\r\n        background-color: #a3c1d9;\r\n    }\r\n\r\n    .task-flexibletask {\r\n        background-color: #ddcc98;\r\n    }\r\n\r\n    .task-quiz {\r\n        background-color: #fecbd2;\r\n    }\r\n\r\n    .task-spellingtest {\r\n        background-color: #bec5cb;\r\n    }\r\n\r\n    .task-classtest {\r\n        background-color: #b1cc9f;\r\n    }\r\n\r\n    .task-separator {\r\n        border-bottom: 1px solid #f4ac90;\r\n    }\r\n</style>",
    "<script>\r\n    export let submissions;\r\n    export let selected;\r\n\r\n    let filter = \"\";\r\n    let selected_status = \"\";\r\n\r\n    let pool = submissions;\r\n\r\n    function update() {\r\n        pool = filter ? Object.values(submissions).filter(submission => submission.student_name.toLowerCase().indexOf(filter.toLowerCase()) !== -1) : Object.values(submissions);\r\n        pool = selected_status ? pool.filter(submission => selected_status.toLowerCase() === submission.status) : pool;\r\n        pool.sort((a, b) => a.student_name.toLowerCase().localeCompare(b.student_name.toLowerCase()));\r\n    }\r\n    \r\n    $: filter, selected_status, submissions, update();\r\n</script>\r\n\r\n<div class=\"selector-list\">\r\n    <div class=\"selector-list-header\">\r\n        <input name=\"filter\" bind:value={filter}>\r\n        <label for=\"filter\">Filter ({pool.length})</label>\r\n        <select on:blur on:change={e => selected_status = e.target.options[e.target.selectedIndex].value}>\r\n            <option value=\"\" selected={true}>All</option>\r\n            <option value=\"submitted\">Submitted</option>\r\n            <option value=\"not-submitted\">Not Submitted</option>\r\n            <option value=\"submitted-late\">Submitted late</option>\r\n        </select>\r\n    </div>\r\n    <div class=\"selector-list-table\">\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <td></td>\r\n                    <td>Student name</td>\r\n                    <td>Status</td>\r\n                    <td>Grade</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {#each pool as submission}\r\n                    <tr class=\"submission submission-{submission.status}\">\r\n                        <td><button on:click=\"{() => selected = submission}\">→</button></td>\r\n                        <td>{submission.student_name}</td>\r\n                        <td>{submission.status || \"-\"}</td>\r\n                        <td>{submission.grade || \"-\"}</td>\r\n                    </tr>\r\n                {/each}\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    .submission, .submission-null {\r\n        background-color: #f5f5f5;\r\n    }\r\n\r\n    .submission-not-submitted {\r\n        background-color: #ee846a;\r\n    }\r\n\r\n    .submission-submitted-late {\r\n        background-color: #ddcc98\r\n    }\r\n\r\n    .submission-submitted {\r\n        background-color: #92f0bc;\r\n    }\r\n</style>",
    "<script>\r\n    import { createEventDispatcher } from \"svelte\";\r\n\r\n    export let tasks;\r\n    export let selected;\r\n\r\n    let title = \"\";\r\n    let regex = false;\r\n    let description = false;\r\n    let class_group = \"\";\r\n    let subject = \"\";\r\n    let type = \"\";\r\n    let teacher = \"\";\r\n    let show_past = false;\r\n\r\n    let pool = [];\r\n\r\n    function isoverdue(task) {\r\n        return task.due_on + 86400000 < Date.now();\r\n    }\r\n\r\n    function update() {\r\n        pool = show_past ? Object.values(tasks) : Object.values(tasks).filter(task => !task.completed || task.due_on + 86400000 > Date.now());\r\n\r\n        if (title) {\r\n            if (description) {\r\n                pool = pool.filter(task => (task.class_task_title.toLowerCase() + (task.description ? \" \" + task.description.toLowerCase() : \"\")).indexOf(title.toLowerCase()) !== -1);\r\n            } else {\r\n                pool = pool.filter(task => task.class_task_title.toLowerCase().indexOf(title.toLowerCase()) !== -1);\r\n            }\r\n        }\r\n\r\n        pool = class_group ? pool.filter(task => task.class_group_name.toLowerCase().indexOf(class_group.toLowerCase()) !== -1) : pool;\r\n        pool = subject ? pool.filter(task => task.subject.toLowerCase().indexOf(subject.toLowerCase()) !== -1) : pool;\r\n        pool = type ? pool.filter(task => task.class_task_type === type) : pool;\r\n        pool = teacher ? pool.filter(task => task.teacher_name.toLowerCase().indexOf(teacher.toLowerCase()) !== -1) : pool;\r\n        \r\n        pool.sort((a, b) => a.due_on - b.due_on);\r\n    }\r\n\r\n    $: if (tasks || title || regex || description || class_group || subject || type || teacher || show_past || 1) update();\r\n\r\n    const dispatch = createEventDispatcher();\r\n\r\n    function select_task(task) {\r\n        selected = task;\r\n\r\n        dispatch(\"select_task\", {\r\n            task: task\r\n        });\r\n    }\r\n</script>\r\n\r\n<div class=\"selector-list\">\r\n    <div class=\"selector-list-header\">\r\n        <fieldset>\r\n            <legend>Filter ({pool.length})</legend>\r\n            <input name=\"filter\" bind:value={title}> <label for=\"filter\">Filter</label><br>\r\n            <input type=\"checkbox\" name=\"description\" bind:checked={description}> <label for=\"description\">Match description?</label><br>\r\n            <input name=\"class-group\" bind:value={class_group}> <label for=\"class-group\">Class group</label><br><br>\r\n            <input name=\"subject\" bind:value={subject}> <label for=\"subject\">Subject</label>\r\n            <select on:blur on:change={e => type = e.target.options[e.target.selectedIndex].value}>\r\n                <option selected={true} value=\"\">All</option>\r\n                <option value=\"Homework\">Homeworks</option>\r\n                <option value=\"FlexibleTask\">Flexible Tasks</option>\r\n                <option value=\"Quiz\">Quizzes</option>\r\n                <option value=\"SpellingTest\">Spelling Tests</option>\r\n            </select><br><br>\r\n            <input name=\"teacher\" bind:value={teacher}> <label for=\"teacher\">Teacher</label>\r\n            <input type=\"checkbox\" name=\"show-past\" bind:checked={show_past}> <label for=\"show-past\">Show past?</label><br>\r\n        </fieldset>\r\n    </div>\r\n    <div class=\"selector-list-table\">\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <td></td>\r\n                    <td></td>\r\n                    <td>Due on</td>\r\n                    <td>Class group</td>\r\n                    <td>Subject</td>\r\n                    <td>Teacher</td>\r\n                    <td>Title</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {#each pool as task, i}\r\n                    <tr class=\"task-{task.class_task_type.toLowerCase()}{!show_past && pool[i + 1] && isoverdue(task) && !isoverdue(pool[i + 1]) ? \" task-separator\" : \"\"}\">\r\n                        <td><button on:click={() => select_task(task)}>→</button></td>\r\n                        <td><input type=\"checkbox\" bind:checked={task.completed} on:change={e => task.setCompleted(e.target.checked)}/></td>\r\n                        {#if task.completed}\r\n                            <td><s>{new Date(task.due_on).toLocaleDateString()}</s></td>\r\n                            <td><s>{task.class_group_name}</s></td>\r\n                            <td><s>{task.subject}</s></td>\r\n                            <td><s>{task.teacher_name}</s></td>\r\n                            <td><s>{task.class_task_title}</s></td>\r\n                        {:else}\r\n                            <td>{new Date(task.due_on).toLocaleDateString()}</td>\r\n                            <td>{task.class_group_name}</td>\r\n                            <td>{task.subject}</td>\r\n                            <td>{task.teacher_name}</td>\r\n                            <td>{task.class_task_title}</td>\r\n                        {/if}\r\n                    </tr>\r\n                {/each}\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    .task-homework {\r\n        background-color: #a3c1d9;\r\n    }\r\n\r\n    .task-flexibletask {\r\n        background-color: #ddcc98;\r\n    }\r\n\r\n    .task-quiz {\r\n        background-color: #fecbd2;\r\n    }\r\n\r\n    .task-spellingtest {\r\n        background-color: #bec5cb;\r\n    }\r\n\r\n    .task-classtest {\r\n        background-color: #b1cc9f;\r\n    }\r\n\r\n    .task-separator {\r\n        border-bottom: 1px solid #f4ac90;\r\n    }\r\n</style>",
    "<script>\r\n\timport { createEventDispatcher } from 'svelte';\r\n    \r\n    export let _cache;\r\n    export let client;\r\n\r\n    client; // removes annoying yellow line\r\n\r\n\timport ClassGroups from \"../components/ClassGroups.svelte\"\r\n\timport ClassGroupInfo from \"../components/ClassGroupInfo.svelte\"\r\n\timport Teachers from \"../components/Teachers.svelte\"\r\n    import TeacherInfo from \"../components/TeacherInfo.svelte\"\r\n\r\n    import Tasks from \"../components/Tasks.svelte\"\r\n    \r\n\tlet selected_class_group = null;\r\n    let selected_teacher = null;\r\n\r\n    export let selected_task;\r\n    \r\n    const dispatch = createEventDispatcher();\r\n\r\n    function select_task(task) {\r\n        dispatch(\"select_task\", {\r\n            task: task\r\n        });\r\n    }\r\n\r\n    $: selected_teacher_user = selected_teacher ? _cache.users[selected_teacher.id] : null;\r\n</script>\r\n\r\n<div class=\"page\" id=\"page-main-dash\">\r\n    <div class=\"page-section column\" id=\"section-tasks\">\r\n        <div class=\"page-content-title\">\r\n            <span>Tasks</span>\r\n        </div>\r\n        <Tasks tasks={_cache.tasks} bind:selected={selected_task} on:select_task={select_task}/>\r\n    </div>\r\n    <div class=\"page-section column\" id=\"section-teachers\">\r\n        <div class=\"page-content-title\">\r\n            <span>Teachers</span>\r\n        </div>\r\n        <Teachers teachers={_cache.own_teachers} users={Object.values(_cache.users)} bind:selected={selected_teacher}/>\r\n        <div class=\"page-content\">\r\n            <div class=\"page-content-title\">\r\n                <span>Selected</span>\r\n            </div>\r\n            <TeacherInfo teacher={selected_teacher} user={selected_teacher_user}/>\r\n        </div>\r\n    </div>\r\n    <div class=\"page-section column\" id=\"section-classes\">\r\n        <div class=\"page-content-title\">\r\n            <span>Class Groups</span>\r\n        </div>\r\n        <ClassGroups class_groups={_cache.class_groups} bind:selected={selected_class_group}/>\r\n        <div class=\"page-content\">\r\n            <div class=\"page-content-title\">\r\n                <span>Selected</span>\r\n            </div>\r\n            <ClassGroupInfo class_group={selected_class_group}/>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    #page-main-dash {\r\n        grid-template-rows: minmax(0, 1fr) minmax(0, 1fr);\r\n        grid-template-columns: minmax(0, 2fr) minmax(0, 1fr);\r\n    }\r\n        \r\n    #section-tasks {\r\n        grid-area: 1 / 1 / 2 span / 1;\r\n    }\r\n\r\n    #section-teachers {\r\n        grid-area: 1 / 2 / 1 / 2;\r\n    }\r\n\r\n    #section-classes {\r\n        grid-area: 2 / 2 / 2 / 2;\r\n    }\r\n</style>",
    "<script>\r\n    import SelectTasks from \"../components/SelectTasks.svelte\"\r\n    import SubmissionQueryInformation from \"../components/SubmissionQueryInformation.svelte\"\r\n    import { querySubmissions } from \"../util/querySubmissions.js\"\r\n\r\n    export let _cache;\r\n    export let client;\r\n    export let query_submissions;\r\n\r\n    let selected_tasks = [];\r\n    let information = null;\r\n</script>\r\n\r\n<div class=\"page\" id=\"page-query-submissions\">\r\n    <div class=\"page-section column\" id=\"section-tasks\">\r\n        <div class=\"page-content-title\">\r\n            <span>Select Tasks</span>\r\n        </div>\r\n        <a href=\"##\" on:click={() => query_submissions = false}>Back</a>\r\n        <SelectTasks tasks={_cache.tasks} bind:selected={selected_tasks} max=10/>\r\n    </div>\r\n    <div class=\"page-section\" id=\"section-query\">\r\n        <div class=\"page-content\">\r\n            <div class=\"page-content-title\">\r\n                <span>Query</span>\r\n            </div>\r\n            <div>\r\n                <button\r\n                    disabled={selected_tasks.length === 0}\r\n                    on:click={() => querySubmissions(client, selected_tasks).then(info => information = info)}\r\n                >\r\n                    Query {selected_tasks.length} Task{selected_tasks.length === 1 ? \"\" : \"s\"}..\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <div class=\"page-content\">\r\n            <div class=\"page-content-title\">\r\n                <span>Submissions</span>\r\n            </div>\r\n            {#if information}\r\n                <SubmissionQueryInformation submissions={information.submissions}/>\r\n            {/if}\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    #page-query-submissions {\r\n        grid-template-rows: minmax(0, 5fr) minmax(0, 2fr);\r\n        grid-template-columns: minmax(0, 1fr);\r\n    }\r\n\r\n    #section-tasks {\r\n        grid-area: 1 / 1 / 1 / 1;\r\n    }\r\n\r\n    #section-query {\r\n        grid-area: 2 / 1 / 2 / 1;\r\n    }\r\n</style>",
    "<script>\r\n    import Submissions from \"../components/Submissions.svelte\"\r\n    import HFTSubmissionInfo from \"../components/HFTSubmissionInfo.svelte\"\r\n    import Comments from \"../components/Comments.svelte\"\r\n    import CommentInput from \"../components/CommentInput.svelte\"\r\n    import Attachments from \"../components/Attachments.svelte\"\r\n    import HFTInfo from \"../components/HFTInfo.svelte\"\r\n\r\n    export let client;\r\n    export let _cache;\r\n    export let selected_task;\r\n    \r\n    export let selected_submission;\r\n\r\n    $: assignment = selected_task ? _cache.assignments[selected_task.class_task_id] : null;\r\n    $: attachments = assignment ? Object.values(_cache.attachments).filter(attachment => assignment.attachment_ids.indexOf(attachment.id) !== -1) : [];\r\n    $: submissions = assignment ? Object.values(_cache.submissions).filter(submission => assignment.submission_ids.indexOf(submission.id) !== -1) : [];\r\n    $: comments = selected_submission ? Object.values(_cache.comments).filter(comment => selected_submission.comment_ids.indexOf(comment.id) !== -1) : [];\r\n</script>\r\n\r\n{#if assignment}\r\n    <div class=\"page\" id=\"page-selected-hft\">\r\n        <div class=\"page-section column\" id=\"section-description\">\r\n            <div class=\"page-content-title task-title task-title-{selected_task.class_task_type.toLowerCase()}\">\r\n                {#if selected_task.class_task_type === \"Homework\"}\r\n                    <a href=\"https://www.satchelone.com/homeworks/{assignment.id}\" target=\"_blank\"><span>{assignment.title}</span></a>\r\n                {:else if selected_task.class_task_type === \"FlexibleTask\"}\r\n                    <a href=\"https://www.satchelone.com/flexible-tasks/{assignment.id}\" target=\"_blank\"><span>{assignment.title}</span></a>\r\n                {/if}\r\n            </div>\r\n            <div id=\"task-description\">\r\n                <a href=\"##\" on:click={() => selected_task = null}>Back</a><br>\r\n                {@html selected_task.description}<br>\r\n                {#each assignment.web_links as web_link}\r\n                    <a href=\"{web_link.url}\" target=\"_blank\">{web_link.url}</a><br>\r\n                {/each}\r\n            </div>\r\n        </div>\r\n        <div class=\"page-section column\" id=\"section-information\">\r\n            <div class=\"page-content-title\">\r\n                <span>Information</span>\r\n            </div>\r\n            <HFTInfo {assignment}/>\r\n        </div>\r\n        <div class=\"page-section column\" id=\"section-attachments\">\r\n            <div class=\"page-content-title\">\r\n                <span>Attachments</span>\r\n            </div>\r\n            <Attachments {attachments}/>\r\n        </div>\r\n        <div class=\"page-section\" id=\"section-submissions\">\r\n            <div class=\"page-content\">\r\n                <div class=\"page-content-title\">\r\n                    <span>Submissions</span>\r\n                </div>\r\n                <Submissions {submissions} bind:selected={selected_submission}/>\r\n            </div>\r\n            <div class=\"page-content\">\r\n                <div class=\"page-content-title\">\r\n                    <span>Selected</span>\r\n                </div>\r\n                <HFTSubmissionInfo submission={selected_submission}/>\r\n            </div>\r\n            <div class=\"page-content\">\r\n                <div class=\"page-content-title\">\r\n                    <span>Comments</span>\r\n                </div>\r\n                <div class=\"scroll\" style=\"flex:1 1 0;\">\r\n                    <Comments {comments} submission={selected_submission}/>\r\n                </div>\r\n                {#if selected_submission && selected_submission.student_id === client.student.id}\r\n                    <div style=\"flex-direction:column;flex:1 1 0;\">\r\n                        <CommentInput submission={selected_submission}/>\r\n                    </div>\r\n                {/if}\r\n            </div>\r\n        </div>\r\n    </div>\r\n{/if}\r\n\r\n<style>\r\n    #page-selected-hft {\r\n\t\tgrid-template-columns: minmax(0, 2fr) minmax(0, 1fr);\r\n\t\tgrid-template-rows: minmax(0, 3fr) minmax(0, 3fr) minmax(0, 4fr);\r\n    }\r\n    \r\n    #section-description { \r\n        grid-area: 1 / 1 / 2 span / 1;\r\n    }\r\n\r\n    #task-description {\r\n        padding: 4px;\r\n        overflow: auto;\r\n    }\r\n\r\n    #section-information {\r\n        grid-area: 1 / 2 / 1 / 2;\r\n    }\r\n\r\n    #section-attachments {\r\n        grid-area: 2 / 2 / 2 / 2;\r\n    }\r\n\r\n    #section-submissions {\r\n        grid-area: 3 / 1 / 3 / 2 span;\r\n    }\r\n</style>",
    "<script>\r\n    import { createEventDispatcher } from 'svelte';\r\n    \r\n    import QuizSubmissionInfo from \"../components/QuizSubmissionInfo.svelte\"\r\n    import Comments from \"../components/Comments.svelte\"\r\n    import CommentInput from \"../components/CommentInput.svelte\"\r\n    import Questions from \"../components/Questions.svelte\"\r\n    import QuestionInfo from \"../components/QuestionInfo.svelte\"\r\n    import QuizInfo from \"../components/QuizInfo.svelte\"\r\n\r\n    export let client;\r\n    export let _cache;\r\n    export let selected_task;\r\n\r\n    let selected_question;\r\n\r\n    $: submission_question = submission_questions && selected_question ? submission_questions.filter(question => question.quiz_question_id === selected_question.id)[0] : null;\r\n\r\n    $: assignment = selected_task ? _cache.assignments[selected_task.class_task_id] : null;\r\n    $: submission = assignment ? Object.values(_cache.submissions).filter(submission => submission.student_id === client.student.id)[0] : null;\r\n    $: questions = assignment ? Object.values(_cache.questions).filter(question => assignment.question_ids.indexOf(question.id) !== -1) : [];\r\n    $: comments = submission ? Object.values(_cache.comments).filter(comment => submission.comment_ids.indexOf(comment.id) !== -1) : [];\r\n    $: submission_questions = submission ? Object.values(_cache.submission_questions).filter(question => assignment.question_ids.indexOf(question.quiz_question_id) !== -1) : [];\r\n</script>\r\n\r\n{#if assignment}\r\n\t<div class=\"page\" id=\"page-selected-quiz\">\r\n        <div class=\"page-section column\" id=\"section-description\">\r\n            <div class=\"page-content-title task-title task-title-{selected_task.class_task_type.toLowerCase()}\">\r\n                {#if selected_task.class_task_type === \"Quiz\"}\r\n                    <a href=\"https://www.satchelone.com/quizzes/{assignment.id}\" target=\"_blank\"><span>{assignment.title}</span></a>\r\n                {/if}\r\n            </div>\r\n            <div id=\"task-description\">\r\n                <a href=\"##\" on:click={() => selected_task = null}>Back</a><br>\r\n                {@html selected_task.description}<br>\r\n                {#each assignment.web_links as web_link}\r\n                    <a href=\"{web_link.url}\" target=\"_blank\">{web_link.url}</a><br>\r\n                {/each}\r\n            </div>\r\n        </div>\r\n        <div class=\"page-section column\" id=\"section-questions\">\r\n            <div class=\"page-content-title\">\r\n                <span>Questions</span>\r\n            </div>\r\n            <Questions {questions} bind:selected={selected_question}/>\r\n            <div class=\"page-content\">\r\n                <div class=\"page-content-title\">\r\n                    <span>Selected</span>\r\n                </div>\r\n                <div style=\"overflow:auto;\">\r\n                    <QuestionInfo question={selected_question} {submission_question}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"page-section column\" id=\"section-information\">\r\n            <div class=\"page-content-title\">\r\n                <span>Information</span>\r\n            </div>\r\n            <QuizInfo {assignment}/>\r\n        </div>\r\n        <div class=\"page-section\" id=\"section-submissions\">\r\n            <div class=\"page-content\">\r\n                <div class=\"page-content-title\">\r\n                    <span>Submission</span>\r\n                </div>\r\n                {#if submission}\r\n                    <QuizSubmissionInfo {submission} {submission_questions}/>\r\n                {/if}\r\n            </div>\r\n            <div class=\"page-content\">\r\n                <div class=\"page-content-title\">\r\n                    <span>Comments</span>\r\n                </div>\r\n                {#if submission}\r\n                    <div class=\"scroll\" style=\"flex:1 1 0;\">\r\n                        <Comments {comments} {submission}/>\r\n                    </div>\r\n                    <div style=\"flex-direction:column;flex:1 1 0;\">\r\n                        <CommentInput {submission}/>\r\n                    </div>\r\n                {/if}\r\n            </div>\r\n        </div>\r\n    </div>\r\n{/if}\r\n\r\n<style>\r\n    #page-selected-quiz {\r\n\t\tgrid-template-columns: minmax(0, 2fr) minmax(0, 1fr);\r\n\t\tgrid-template-rows: minmax(0, 4fr) minmax(0, 2fr) minmax(0, 4fr);\r\n    }\r\n    \r\n    #section-description { \r\n        grid-area: 1 / 1 / 2 span / 1;\r\n    }\r\n\r\n    #task-description {\r\n        padding: 4px;\r\n        overflow: auto;\r\n    }\r\n\r\n    #section-questions {\r\n        grid-area: 2 / 2 / 3 span / 2;\r\n    }\r\n\r\n    #section-information {\r\n        grid-area: 1 / 2 / 1 / 2;\r\n    }\r\n\r\n    #section-submissions {\r\n        grid-area: 3 / 1 / 3 / 1;\r\n    }\r\n</style>"
  ],
  "names": [],
  "mappings": "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"
}